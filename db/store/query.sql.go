// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package store

import (
	"context"
	"database/sql"
	"time"

	pgvector_go "github.com/pgvector/pgvector-go"
)

const getLoadedEntryIds = `-- name: GetLoadedEntryIds :many
SELECT id FROM entries ORDER BY created_at DESC
`

func (q *Queries) GetLoadedEntryIds(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getLoadedEntryIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByCosineSimilarity = `-- name: ListEntriesByCosineSimilarity :many
SELECT id, created_at, text, CAST(1 - (embedding <=> $1) AS FLOAT(32)) AS cosine_similarity FROM entries ORDER BY cosine_similarity DESC limit $2
`

type ListEntriesByCosineSimilarityParams struct {
	Embedding pgvector_go.Vector
	Limit     int32
}

type ListEntriesByCosineSimilarityRow struct {
	ID               int32
	CreatedAt        time.Time
	Text             sql.NullString
	CosineSimilarity float64
}

func (q *Queries) ListEntriesByCosineSimilarity(ctx context.Context, arg ListEntriesByCosineSimilarityParams) ([]ListEntriesByCosineSimilarityRow, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByCosineSimilarity, arg.Embedding, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEntriesByCosineSimilarityRow
	for rows.Next() {
		var i ListEntriesByCosineSimilarityRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Text,
			&i.CosineSimilarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loadEntry = `-- name: LoadEntry :exec
INSERT INTO entries (id, text, creator_id, created_at, updated_at, embedding) VALUES ($1, $2, $3, $4, $5, $6)
`

type LoadEntryParams struct {
	ID        int32
	Text      sql.NullString
	CreatorID string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
	Embedding pgvector_go.Vector
}

func (q *Queries) LoadEntry(ctx context.Context, arg LoadEntryParams) error {
	_, err := q.db.ExecContext(ctx, loadEntry,
		arg.ID,
		arg.Text,
		arg.CreatorID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Embedding,
	)
	return err
}
